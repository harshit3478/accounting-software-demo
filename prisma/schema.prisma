// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  accountant
}

enum InvoiceStatus {
  paid
  pending
  overdue
  partial
}

enum PaymentMethod {
  cash
  zelle
  quickbooks
  layaway
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String?
  role         Role     @default(accountant)
  privileges   Json?
  name         String
  googleId     String?  @unique
  resetToken   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  invoices  Invoice[]
  payments  Payment[]
  documents Document[]
  paymentMatches PaymentInvoiceMatch[]

  @@map("users")
}

model Invoice {
  id              Int            @id @default(autoincrement())
  userId          Int
  invoiceNumber   String         @unique
  clientName      String
  
  // Item details (stored as JSON for simplicity)
  items           Json?          // [{name, quantity, pricePerItem}]
  
  // Financial details
  subtotal        Decimal        @db.Decimal(10, 2)
  tax             Decimal        @db.Decimal(10, 2) @default(0)
  discount        Decimal        @db.Decimal(10, 2) @default(0)
  amount          Decimal        @db.Decimal(10, 2) // Total amount
  paidAmount      Decimal        @db.Decimal(10, 2) @default(0) // Track partial payments
  
  dueDate         DateTime
  status          InvoiceStatus  @default(pending)
  isLayaway       Boolean        @default(false)
  
  description     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments        Payment[]
  paymentMatches  PaymentInvoiceMatch[]

  @@map("invoices")
}

model Payment {
  id                 Int           @id @default(autoincrement())
  invoiceId          Int?          // Nullable for unmatched payments
  amount             Decimal       @db.Decimal(10, 2)
  paymentDate        DateTime      @default(now())
  method             PaymentMethod
  
  // QuickBooks integration fields
  quickbooksId       String?       @unique
  quickbooksSyncedAt DateTime?
  
  // Manual entry tracking
  userId             Int           // Who recorded this payment
  notes              String?       @db.Text
  
  // Matching status
  isMatched          Boolean       @default(true)
  
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  invoice            Invoice?              @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentMatches     PaymentInvoiceMatch[]

  @@map("payments")
}

model Document {
  id           Int      @id @default(autoincrement())
  userId       Int
  fileName     String   // Unique filename stored in R2
  originalName String   // Original filename from user
  fileSize     BigInt   // File size in bytes
  fileType     String   // MIME type
  fileUrl      String   // Public R2 URL
  uploadedAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model SystemFolder {
  id        Int     @id @default(autoincrement())
  name      String
  isDefault Boolean @default(false)

  @@map("system_folders")
}

model PaymentInvoiceMatch {
  id        Int      @id @default(autoincrement())
  paymentId Int
  invoiceId Int
  amount    Decimal  @db.Decimal(10, 2) // How much of this payment goes to this invoice
  createdAt DateTime @default(now())
  
  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      // Who created this match
  
  @@unique([paymentId, invoiceId])
  @@map("payment_invoice_matches")
}
