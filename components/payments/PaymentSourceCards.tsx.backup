'use client';

import type { PaymentStats, PaymentMethodFilter } from '../../hooks/usePayments';

interface PaymentSourceCardsProps {
  stats: PaymentStats;
  filteredStats: PaymentStats;
  filterMethod: PaymentMethodFilter;
  onFilterChange: (method: PaymentMethodFilter) => void;
  showFiltered: boolean;
}

export default function PaymentSourceCards({
  stats,
  filterMethod,
  onFilterChange,
}: PaymentSourceCardsProps) {
  const paymentSources = [
    {
      id: 'zelle' as PaymentMethodFilter,
      name: 'Zelle Payments',
      amount: stats.zelleToday,
      count: `${stats.zelleCount} payment${stats.zelleCount !== 1 ? 's' : ''}`,
      icon: (
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
        </svg>
      ),
      iconBg: 'bg-green-100',
      iconColor: 'text-green-600',
      label: 'Today'
    },
    {
      id: 'quickbooks' as PaymentMethodFilter,
      name: 'QuickBooks',
      amount: displayStats.quickbooksToday,
      count: `${displayStats.quickbooksCount} payment${displayStats.quickbooksCount !== 1 ? 's' : ''}`,
      icon: (
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
        </svg>
      ),
      iconBg: 'bg-blue-100',
      iconColor: 'text-blue-600',
      label: 'Auto'
    },
    {
      id: 'cash' as PaymentMethodFilter,
      name: 'Cash Payments',
      amount: displayStats.cashToday,
      count: `${displayStats.cashCount} payment${displayStats.cashCount !== 1 ? 's' : ''}`,
      icon: (
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
        </svg>
      ),
      iconBg: 'bg-amber-100',
      iconColor: 'text-amber-600',
      label: 'Manual'
    },
    {
      id: 'layaway' as PaymentMethodFilter,
      name: 'Layaway Plan',
      amount: displayStats.layawayToday,
      count: `${displayStats.layawayCount} payment${displayStats.layawayCount !== 1 ? 's' : ''}`,
      icon: (
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      ),
      iconBg: 'bg-purple-100',
      iconColor: 'text-purple-600',
      label: 'Schedule'
    }
  ];

  return (
    <div>
      {/* Filtered Banner */}
      {showFiltered && (
        <div className="mb-4 bg-blue-50 border border-blue-200 rounded-lg p-3 flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
            </svg>
            <span className="text-sm text-blue-800 font-medium">
              Showing filtered results ({displayStats.cashCount + displayStats.zelleCount + displayStats.quickbooksCount + displayStats.layawayCount} payments)
            </span>
          </div>
          <span className="text-xs text-blue-600">
            Stats reflect active filters
          </span>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      {paymentSources.map((source, index) => (
        <div
          key={source.id}
          onClick={() => onFilterChange(source.id)}
          className={`bg-white p-6 rounded-xl shadow-lg border border-gray-200 card-hover cursor-pointer animate-fade-in-up stagger-${index + 1} ${
            filterMethod === source.id ? 'ring-2 ring-blue-500' : ''
          }`}
        >
          <div className="flex items-center justify-between mb-4">
            <div className={`p-3 ${source.iconBg} rounded-full`}>
              <div className={source.iconColor}>{source.icon}</div>
            </div>
            <span className="text-sm text-gray-500">{source.label}</span>
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-1">{source.name}</h3>
          <p className="text-2xl font-bold text-gray-900 mb-2">${source.amount.toFixed(2)}</p>
          <p className="text-sm text-gray-600">{source.count}</p>
        </div>
      ))}
    </div>
  );
}
