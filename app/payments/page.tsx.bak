'use client';

import { useState, useEffect } from 'react';
import Navigation from '../../components/Navigation';

interface Payment {
  id: number;
  amount: number;
  method: 'cash' | 'zelle' | 'quickbooks' | 'layaway';
  date: string;
  notes: string | null;
  createdAt: string;
  invoice: {
    id: number;
    invoiceNumber: string;
    clientName: string;
    amount: number;
  } | null;
}

interface PaymentStats {
  cashToday: number;
  cashCount: number;
  zelleToday: number;
  zelleCount: number;
  quickbooksToday: number;
  quickbooksCount: number;
  layawayToday: number;
  layawayCount: number;
  totalToday: number;
}

export default function PaymentsPage() {
  const [payments, setPayments] = useState<Payment[]>([]);
  const [stats, setStats] = useState<PaymentStats>({
    cashToday: 0,
    cashCount: 0,
    zelleToday: 0,
    zelleCount: 0,
    quickbooksToday: 0,
    quickbooksCount: 0,
    layawayToday: 0,
    layawayCount: 0,
    totalToday: 0,
  });
  const [filterMethod, setFilterMethod] = useState<'all' | 'cash' | 'zelle' | 'quickbooks' | 'layaway'>('all');
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    fetchPayments();
  }, []);

  const fetchPayments = async () => {
    setIsLoading(true);
    try {
      const res = await fetch('/api/payments');
      if (res.ok) {
        const data = await res.json();
        setPayments(data.map((payment: any) => ({
          ...payment,
          date: new Date(payment.date).toISOString().split('T')[0],
          createdAt: new Date(payment.createdAt).toISOString().split('T')[0],
        })));

        // Calculate today's stats
        const today = new Date().toISOString().split('T')[0];
        const todayPayments = data.filter((p: any) => 
          new Date(p.date).toISOString().split('T')[0] === today
        );

        const newStats: PaymentStats = {
          cashToday: todayPayments.filter((p: any) => p.method === 'cash').reduce((sum: number, p: any) => sum + p.amount, 0),
          cashCount: todayPayments.filter((p: any) => p.method === 'cash').length,
          zelleToday: todayPayments.filter((p: any) => p.method === 'zelle').reduce((sum: number, p: any) => sum + p.amount, 0),
          zelleCount: todayPayments.filter((p: any) => p.method === 'zelle').length,
          quickbooksToday: todayPayments.filter((p: any) => p.method === 'quickbooks').reduce((sum: number, p: any) => sum + p.amount, 0),
          quickbooksCount: todayPayments.filter((p: any) => p.method === 'quickbooks').length,
          layawayToday: todayPayments.filter((p: any) => p.method === 'layaway').reduce((sum: number, p: any) => sum + p.amount, 0),
          layawayCount: todayPayments.filter((p: any) => p.method === 'layaway').length,
          totalToday: todayPayments.reduce((sum: number, p: any) => sum + p.amount, 0),
        };
        
        setStats(newStats);
      }
    } catch (error) {
      console.error('Failed to fetch payments:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const filteredPayments = payments.filter(payment => {
    if (filterMethod === 'all') return true;
    return payment.method === filterMethod;
  });

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const getMethodBadgeClass = (method: string) => {
    const classes = {
      cash: 'bg-amber-100 text-amber-800',
      zelle: 'bg-green-100 text-green-800',
      quickbooks: 'bg-blue-100 text-blue-800',
      layaway: 'bg-purple-100 text-purple-800',
    };
    return `px-2 py-1 rounded-full text-xs font-medium ${classes[method as keyof typeof classes]}`;
  };

  const paymentSources = [
    {
      id: 'zelle',
      name: 'Zelle Payments',
      amount: stats.zelleToday,
      count: `${stats.zelleCount} payment${stats.zelleCount !== 1 ? 's' : ''}`,
      icon: (
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
        </svg>
      ),
      iconBg: 'bg-green-100',
      iconColor: 'text-green-600',
      label: 'Today'
    },
    {
      id: 'credit-card',
      name: 'QuickBooks',
      amount: stats.quickbooksToday,
      count: `${stats.quickbooksCount} payment${stats.quickbooksCount !== 1 ? 's' : ''}`,
      icon: (
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
        </svg>
      ),
      iconBg: 'bg-blue-100',
      iconColor: 'text-blue-600',
      label: 'Auto'
    },
    {
      id: 'cash',
      name: 'Cash Payments',
      amount: stats.cashToday,
      count: `${stats.cashCount} payment${stats.cashCount !== 1 ? 's' : ''}`,
      icon: (
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
        </svg>
      ),
      iconBg: 'bg-amber-100',
      iconColor: 'text-amber-600',
      label: 'Manual'
    },
    {
      id: 'layaway',
      name: 'Layaway',
      amount: stats.layawayToday,
      count: `${stats.layawayCount} payment${stats.layawayCount !== 1 ? 's' : ''}`,
      icon: (
        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      ),
      iconBg: 'bg-purple-100',
      iconColor: 'text-purple-600',
      label: 'Schedule'
    }
  ];

  const mockMatches = [
    {
      id: 1,
      payment: { amount: 1250, source: 'Zelle', client: 'Acme Corporation', date: '2024-01-15' },
      invoice: { id: 'INV-2024-0015', amount: 1250, client: 'Acme Corporation' },
      confidence: 95,
      status: 'suggested'
    },
    {
      id: 2,
      payment: { amount: 850, source: 'Credit Card', client: 'TechStart Inc', date: '2024-01-14' },
      invoice: { id: 'INV-2024-0023', amount: 850, client: 'TechStart Inc' },
      confidence: 88,
      status: 'suggested'
    }
  ];

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  return (
    <div className="bg-gray-50 hero-pattern min-h-screen">
      <Navigation />

      {/* Page Header */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-3xl font-bold text-gray-900">Payment Processing</h2>
              <p className="text-gray-600 mt-2">Upload, match, and reconcile payments from multiple sources</p>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-right">
                <p className="text-sm text-gray-500">Processed Today</p>
                <p className="text-2xl font-bold text-gray-900">${stats.totalToday.toLocaleString()}</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Payment Sources */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          {paymentSources.map((source, index) => (
            <div
              key={source.id}
              onClick={() => setFilterMethod(source.id as any)}
              className={`bg-white p-6 rounded-xl shadow-lg border border-gray-200 card-hover cursor-pointer animate-fade-in-up stagger-${index + 1} ${
                filterMethod === source.id ? 'ring-2 ring-blue-500' : ''
              }`}
            >
              <div className="flex items-center justify-between mb-4">
                <div className={`p-3 ${source.iconBg} rounded-full`}>
                  <div className={source.iconColor}>{source.icon}</div>
                </div>
                <span className="text-sm text-gray-500">{source.label}</span>
              </div>
              <h3 className="text-lg font-semibold text-gray-900 mb-1">{source.name}</h3>
              <p className="text-2xl font-bold text-gray-900 mb-2">${source.amount.toFixed(2)}</p>
              <p className="text-sm text-gray-600">{source.count}</p>
            </div>
          ))}
        </div>

        {/* Filter Buttons */}
        <div className="mb-6 flex items-center space-x-3">
          <button
            onClick={() => setFilterMethod('all')}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
              filterMethod === 'all'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            All Payments
          </button>
          <button
            onClick={() => setFilterMethod('cash')}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
              filterMethod === 'cash'
                ? 'bg-amber-600 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            Cash
          </button>
          <button
            onClick={() => setFilterMethod('zelle')}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
              filterMethod === 'zelle'
                ? 'bg-green-600 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            Zelle
          </button>
          <button
            onClick={() => setFilterMethod('quickbooks')}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
              filterMethod === 'quickbooks'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            QuickBooks
          </button>
          <button
            onClick={() => setFilterMethod('layaway')}
            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
              filterMethod === 'layaway'
                ? 'bg-purple-600 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            Layaway
          </button>
        </div>

        {/* Payment History Table */}
        <div className="bg-white rounded-xl shadow-lg border border-gray-200 mb-8">
          <div className="px-6 py-4 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">Payment History</h3>
              <span className="text-sm text-gray-500">
                {filteredPayments.length} payment{filteredPayments.length !== 1 ? 's' : ''}
              </span>
            </div>
          </div>

          <div className="overflow-x-auto">
            {isLoading ? (
              <div className="p-12 text-center">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                <p className="text-gray-500 mt-4">Loading payments...</p>
              </div>
            ) : filteredPayments.length === 0 ? (
              <div className="p-12 text-center">
                <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                </svg>
                <p className="text-gray-500 mt-4">No payments found</p>
                <p className="text-sm text-gray-400 mt-1">Record your first payment from an invoice</p>
              </div>
            ) : (
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Invoice</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Client</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Method</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Notes</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredPayments.map((payment, index) => (
                    <tr key={payment.id} className="hover:bg-gray-50 transition-colors">
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {formatDate(payment.date)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {payment.invoice ? payment.invoice.invoiceNumber : 
                          <span className="text-gray-400">No invoice</span>
                        }
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {payment.invoice ? payment.invoice.clientName :
                          <span className="text-gray-400">-</span>
                        }
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-semibold text-gray-900">
                        ${payment.amount.toFixed(2)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={getMethodBadgeClass(payment.method)}>
                          {payment.method.charAt(0).toUpperCase() + payment.method.slice(1)}
                        </span>
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-600 max-w-xs truncate">
                        {payment.notes || <span className="text-gray-400">-</span>}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        </div>

        </tbody>
              </table>
            )}
          </div>
        </div>
      </div>

      {/* Footer */}
      <footer className="bg-white border-t border-gray-200 mt-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center">
            <p className="text-gray-500 text-sm">© 2024 FinanceFlow Accounting System. Professional invoice and payment management.</p>
          </div>
        </div>
      </footer>
    </div>
  );
}

        {/* Duplicate Detection */}
        <div className="bg-white rounded-xl shadow-lg border border-gray-200 mb-8">
          <div className="px-6 py-4 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">Duplicate Detection</h3>
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                <span className="text-sm text-gray-600">Active Monitoring</span>
              </div>
            </div>
          </div>

          <div className="p-6">
            <div className="space-y-3">
              <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="font-medium text-red-900">Potential Duplicate Detected</p>
                    <p className="text-sm text-red-700">$500 payment from Smart Systems appears twice</p>
                  </div>
                  <button className="text-red-600 hover:text-red-700 text-sm font-medium">Review</button>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Recent Payment Activity */}
        <div className="bg-white rounded-xl shadow-lg border border-gray-200">
          <div className="px-6 py-4 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">Recent Payment Activity</h3>
              <button className="text-blue-600 hover:text-blue-700 text-sm font-medium">View All</button>
            </div>
          </div>

          <div className="p-6">
            <div className="space-y-4">
              <div className="flex items-center space-x-4">
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                <div className="flex-1">
                  <p className="text-sm text-gray-900">Payment matched: $1,250 from Acme Corporation</p>
                  <p className="text-xs text-gray-500">2 hours ago</p>
                </div>
              </div>
              <div className="flex items-center space-x-4">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <div className="flex-1">
                  <p className="text-sm text-gray-900">File uploaded: Zelle payments January 2024</p>
                  <p className="text-xs text-gray-500">4 hours ago</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Footer */}
      <footer className="bg-white border-t border-gray-200 mt-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center">
            <p className="text-gray-500 text-sm">© 2024 FinanceFlow Accounting System. Professional invoice and payment management.</p>
          </div>
        </div>
      </footer>
    </div>
  );
}